priority -40

# Function for getting classname

global !p
import vim
import os.path
def get_module_namespace_and_basename():
	"""This function will try to guess the current class or define name you are
	trying to create. Note that for this to work you should be using the module
	structure as per the style guide. Examples inputs and it's output
	* /home/nikolavp/puppet/modules/collectd/manifests/init.pp -> collectd
	* /home/nikolavp/puppet/modules/collectd/manfistes/mysql.pp -> collectd::mysql
	"""
	first_time = True
	current_file_path_without_ext = vim.eval('expand("%:p:r")') or ""
	if not current_file_path_without_ext:
		return "name"
	parts = os.path.split(current_file_path_without_ext)
	namespace = ''
	while parts[0] and parts[0] != '/':
		if parts[1] == 'init' and first_time and not namespace:
			first_time = False
			parts = os.path.split(parts[0])
			continue
		if parts[1] == 'manifests':
			return os.path.split(parts[0])[1] + ('::' + namespace).rstrip(':')
		else:
			namespace = parts[1] + '::' + namespace
		parts = os.path.split(parts[0])
	# couldn't guess the namespace. The user is editing a raw file in no module like the site.pp file
	return "name"
endglobal

# My personal puppet snippets

snippet class "Class declaration" b
#
# == Class: ${0:`!p snip.rv = get_module_namespace_and_basename()`}
#
# ${1:What does this class do?}
#
class ${2:`!p snip.rv = get_module_namespace_and_basename()`} {

	${3:# body}

}
endsnippet

snippet define "Definition" b
#
# == Define: ${0:`!p snip.rv = get_module_namespace_and_basename()`}
#
# ${1:What does this definition do?}
#
define ${2:`!p snip.rv = get_module_namespace_and_basename()`} {

	${3:# body}

}
endsnippet

snippet exec "Exec resource type" b
exec { '${1:command}':
	refreshonly => true,
}
endsnippet

snippet file "File resource type" b
file { '${1:name}':
	owner  => ${2:username},
	group  => ${3:groupname},
	mode   => '0644',
	source => "puppet://${2:path}",
}
endsnippet

# vim:ft=snippets:
